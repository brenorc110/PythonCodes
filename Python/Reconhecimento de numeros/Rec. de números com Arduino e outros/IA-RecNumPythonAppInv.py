from pybrain.tools.shortcuts     import buildNetwork
from pybrain.datasets            import SupervisedDataSet
from pybrain.supervised.trainers import BackpropTrainer
from pybrain.structure.modules   import SoftmaxLayer
from pybrain.structure.modules   import SigmoidLayer
import serial
import time


# parametros: atributos de entrada
#             total de neuronios na camada oculta
#             classes
rede = buildNetwork(49, 32, 10, hiddenclass=SigmoidLayer, outclass=SoftmaxLayer)

# parametros: atributos de entrada
#             classes
base = SupervisedDataSet(49, 10)

#aqui entram as amostras para treinamento
base.addSample((0,0,2,2,2,0,0,0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,0,2,2,2,0,0,0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0,0,0,2,2,2,0,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,0,2,2,2,0,0,0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(1,0,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,2,0,0,0,0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0 ),(1,0,0,0,0,0,0,0,0,0))

base.addSample((0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,0,0,0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,0,2,0,0,0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,2,4,2,2,4,2,0,0,2,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,0,2,0,0,0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0,0 ),(0,1,0,0,0,0,0,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0 ),(0,1,0,0,0,0,0,0,0,0))

base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,0,2,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,2,0,2,4,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,0,2,4,2,0,2,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,0,0,0,0,2,4,2,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,0,0,0,0,2,4,2,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,0,2,0,0,2,4,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,0,2,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,0,0,2,4,4,4,4,2 ),(0,0,1,0,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,1,0,0,0,0,0,0,0))

base.addSample((0,0,2,2,2,0,0,0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,4,2,0,0,0,0,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((0,2,4,4,2,0,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,2,2,4,2,0,0,2,4,4,2,0,0 ),(0,0,0,1,0,0,0,0,0,0))
base.addSample((2,4,4,4,2,0,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,2,0,0 ),(0,0,0,1,0,0,0,0,0,0))

base.addSample((2,4,2,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,2,0,0,0,2,4,2,4,2,0,0,2,4,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,0,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,0,0,0,0,2,4,2,2,0,0,0,2,4,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((2,0,0,0,2,0,0,4,2,0,2,4,2,0,4,2,2,2,4,2,0,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,0,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,0,0,0,0,0,0,2,0,0,0,2,0,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,0,0,0,0,0,0,0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((0,2,0,0,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))
base.addSample((2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,1,0,0,0,0,0))

base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,2,0 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,2,0 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,2,0 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,0,0,2,4,4,4,4,2,0,0,2,2,2,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,0,0,0,0,2,4,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,4,4,4,2,0,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,2,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((2,4,4,4,4,2,0,2,4,2,2,2,0,0,2,4,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,2,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,0,0,1,0,0,0,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(0,0,0,0,0,1,0,0,0,0))

base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,0,2,2,0,2,4,2,2,4,4,2,2,4,2,0,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,4,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,0,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,4,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,0,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,2,2,2,0,0,2,4,4,4,4,2,2,4,2,2,2,2,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,4,2,0,0,2,4,4,4,2 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,0,2,2,0,2,4,2,2,4,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,2,2,0,0,2,4,2,4,4,2,0,2,4,2,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0 ),(0,0,0,0,0,0,1,0,0,0))
base.addSample((0,0,2,4,4,2,0,0,2,4,2,2,0,0,2,4,2,2,2,2,0,2,4,2,4,4,4,2,2,4,2,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0 ),(0,0,0,0,0,0,1,0,0,0))


base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((0,0,2,2,2,0,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((0,2,2,2,0,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,0,0,0,0,0,0,1,0,0))
base.addSample((2,2,2,2,0,0,0,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0,0 ),(0,0,0,0,0,0,0,1,0,0))

base.addSample((0,0,2,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0,0,0,2,2,2,0,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0,0,0,2,2,2,0,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,2,0,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0 ),(0,0,0,0,0,0,0,0,1,0))
base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,2,0,2,4,2,2,2,4,2,0,2,4,4,4,2,0,0,0,2,2,2,0,0 ),(0,0,0,0,0,0,0,0,1,0))


base.addSample((0,2,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((2,4,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2,0 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,4,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,4,4,4,4,2,0,2,4,2,2,4,2,0,2,4,2,2,4,2,0,0,2,4,4,4,2,0,0,0,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,2,4,4,4,4,4,2,0,2,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,2,2,2,2,0,2,4,4,4,4,4,2,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))
base.addSample((0,2,2,2,2,0,0,2,4,4,4,4,2,0,2,4,2,2,2,4,2,2,4,2,2,2,4,2,0,2,4,4,4,4,2,0,0,2,2,2,4,2,0,0,0,0,2,4,2 ),(0,0,0,0,0,0,0,0,0,1))


treinamento = BackpropTrainer(rede, 
                              dataset = base, 
                              learningrate = 0.1, 
                              momentum = 0.05)

Epocas = 2000
for i in range(0, Epocas):
    erro = treinamento.train()
    if i % 500 == 0:
        print(f"Erro: {erro}  -  Faltam {Epocas-i}")

print(f"Erro final: {erro}")


portaSerial = serial.Serial('COM15', 9600)
time.sleep(2)

while(True):
    linha = portaSerial.readline().decode("ascii")
    time.sleep(1)
    
    valores = linha.split(',')
    
    v00 = valores[0] 
    v01 = valores[1] 
    v02 = valores[2]
    v03 = valores[3]
    v04 = valores[4]
    v05 = valores[5]
    v06 = valores[6]
    v07 = valores[7]
    v08 = valores[8]
    v09 = valores[9]
    v10 = valores[10]
    v11 = valores[11]
    v12 = valores[12]
    v13 = valores[13]
    v14 = valores[14]
    v15 = valores[15]
    v16 = valores[16]
    v17 = valores[17]
    v18 = valores[18]
    v19 = valores[19]
    v20 = valores[20]
    v21 = valores[21]
    v22 = valores[22]
    v23 = valores[23]
    v24 = valores[24]
    v25 = valores[25]
    v26 = valores[26]
    v27 = valores[27]
    v28 = valores[28]
    v29 = valores[29]
    v30 = valores[30]
    v31 = valores[31]
    v32 = valores[32]
    v33 = valores[33]
    v34 = valores[34]
    v35 = valores[35]
    v36 = valores[36]
    v37 = valores[37]
    v38 = valores[38]
    v39 = valores[39]
    v40 = valores[40]
    v41 = valores[41]
    v42 = valores[42]
    v43 = valores[43]
    v44 = valores[44]
    v45 = valores[45]
    v46 = valores[46]
    v47 = valores[47]
    v48 = valores[48]
    
    v00 = int(v00) 
    v01 = int(v01) 
    v02 = int(v02)
    v03 = int(v03)
    v04 = int(v04)
    v05 = int(v05)
    v06 = int(v06)
    v07 = int(v07)
    v08 = int(v08)
    v09 = int(v09)
    v10 = int(v10)
    v11 = int(v11)
    v12 = int(v12)
    v13 = int(v13)
    v14 = int(v14)
    v15 = int(v15)
    v16 = int(v16)
    v17 = int(v17)
    v18 = int(v18)
    v19 = int(v19)
    v20 = int(v20)
    v21 = int(v21)
    v22 = int(v22)
    v23 = int(v23)
    v24 = int(v24)
    v25 = int(v25)
    v26 = int(v26)
    v27 = int(v27)
    v28 = int(v28)
    v29 = int(v29)
    v30 = int(v30)
    v31 = int(v31)
    v32 = int(v32)
    v33 = int(v33)
    v34 = int(v34)
    v35 = int(v35)
    v36 = int(v36)
    v37 = int(v37)
    v38 = int(v38)
    v39 = int(v39)
    v40 = int(v40)
    v41 = int(v41)
    v42 = int(v42)
    v43 = int(v43)
    v44 = int(v44)
    v45 = int(v45)
    v46 = int(v46)
    v47 = int(v47)
    v48 = int(v48)
    
    resultado = rede.activate([v00,v01,v02,v03,v04,v05,v06,v07,v08,v09,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v42,v43,v44,v45,v46,v47,v48])
    
    maior = resultado[0]
    posicao = 0
    for i in range(1,len(resultado)):
        if resultado[i] > maior:
            maior = resultado[i]
            posicao = i        

    if(posicao ==0): 
        print("Número 0")
    if(posicao ==1): 
        print("Número 1")
    if(posicao ==2): 
        print("Número 2")
    if(posicao ==3): 
        print("Número 3")
    if(posicao ==4): 
        print("Número 4")
    if(posicao ==5): 
        print("Número 5")
    if(posicao ==6): 
        print("Número 6")
    if(posicao ==7): 
        print("Número 7")
    if(posicao ==8): 
        print("Número 8")
    if(posicao ==9): 
        print("Número 9")
   

    if(posicao ==0): 
        portaSerial.write(b'0')
    if(posicao ==1): 
        portaSerial.write(b'1')
    if(posicao ==2): 
        portaSerial.write(b'2')
    if(posicao ==3): 
        portaSerial.write(b'3')
    if(posicao ==4): 
        portaSerial.write(b'4')
    if(posicao ==5): 
        portaSerial.write(b'5')
    if(posicao ==6): 
        portaSerial.write(b'6')
    if(posicao ==7): 
        portaSerial.write(b'7')
    if(posicao ==8): 
        portaSerial.write(b'8')
    if(posicao ==9): 
        portaSerial.write(b'9')

portaSerial = serial.Serial.close;
